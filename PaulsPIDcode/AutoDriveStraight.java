// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4513.MystStraightPlusTurnInPlace.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4513.MystStraightPlusTurnInPlace.Robot;
import org.usfirst.frc4513.MystStraightPlusTurnInPlaces.subsystems.SmoothDriveSegment;

/**
 *
 */
public class AutoDriveStraight extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDriveStraight() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	SmartDashboard.putNumber("LINE_DIST_FT", 6) ;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// create a simple arc path array with a single straight path entry of 6 ft
    	double dist = SmartDashboard.getNumber("LINE_DIST_FT", 6) ;
    	Robot.drivetrain.driveStraight(dist);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// nothing to do, since driveAlongSegs() starts a separate "Task"
    	// might want to start a timer here
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// probably should be checking for a timeout here instead of immediately finishing
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    	// System.out.println("********************** AutoDrive6ft END ***********************************");
    	// could be doing a force stop here based on a timer
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
